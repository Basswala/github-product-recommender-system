# CI/CD Pipeline for Product Recommender System
# Runs tests, linting, and code quality checks on every push and PR

name: Product Recommender CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install core dependencies
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install development dependencies
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,__pycache__,.git,tests/test_*.py,htmlcov
        # Treat all other errors as warnings
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=127 --statistics --exclude=.venv,__pycache__,.git,htmlcov

    - name: Create mock environment file
      run: |
        echo "# Mock environment for CI testing" > .env
        echo "ASTRA_DB_API_ENDPOINT=https://mock-endpoint.datastax.com" >> .env
        echo "ASTRA_DB_APPLICATION_TOKEN=mock-token-12345" >> .env
        echo "ASTRA_DB_KEYSPACE=mock_keyspace" >> .env
        echo "GROQ_API_KEY=mock-groq-key-67890" >> .env

    - name: Run basic tests
      run: |
        # Run CI-friendly tests that don't require external services
        python -m pytest tests/test_basic.py -v --tb=short

    - name: Run additional unit tests (allow failures)
      run: |
        # Run other tests but don't fail CI if they have issues
        python -m pytest tests/ -v --tb=short --disable-warnings \
          --ignore=tests/test_basic.py \
          --ignore=tests/test_data_ingestion.py \
          --ignore=tests/test_rag_chain.py \
          --ignore=tests/test_flask_app.py \
          -k "not (ingest or build_chain or get_response)" || echo "Some tests failed but CI continues"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
